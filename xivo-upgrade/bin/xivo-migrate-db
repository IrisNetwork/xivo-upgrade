#!/bin/bash

POSTGRESQL_DATA_PATH="/var/lib/postgresql/9.0/main"
MIGRATION_LOG_FILE="/var/log/xivo-database-migration.log"

EXISTING_DB_SIZE=$(du -s $POSTGRESQL_DATA_PATH | awk '{print $1}')
FREE_SPACE=$(df $POSTGRESQL_DATA_PATH |grep /var | awk '{print $3}')

validate_free_space() {
    if [ $EXISTING_DB_SIZE -eq $FREE_SPACE ]; then
    cat <<-EOF
        ERROR: No free space available in /var for migrate database"
        Stopping upgrade...
    EOF
        exit 1
    fi
}

dump_infos() {
    ((existing_size_mo = $EXISTING_DB_SIZE / 1000 ))
    ((freespace_size_mo = $FREE_SPACE / 1000 ))
    ((total_seconde = $existing_size_mo / 8 + 30 ))
    ((estimate_time_minute = $total_seconde / 60 ))
    ((estimate_time_seconde = $total_seconde % 60 ))
cat <<-EOF
    Database size: ${existing_size_mo}Mo
    Free space in /var: ${freespace_size_mo}Mo
    Etimate time for migration: $estimate_time_minute minutes $estimate_time_seconde secondes
EOF
    validate_free_space
}

continue_upgrade() {
    read -p 'Would you like to upgrade your database now [y/N]? ' answer
    answer="${answer:-N}"
    if [ "$answer" == 'n' -o "$answer" == 'N' ]; then
        exit
    fi
}

prepare_configuration() {
    cd /tmp
    echo "Preparing configuration..."
    echo "deb http://mirror.xivo.fr/debian/ postgresql-rc main" > /etc/apt/sources.list.d/postgresql.list
    apt-get update >/dev/null
    apt-get install -y postgresql-9.1 postgresql-plpython-9.1 psmisc
}

validate_configuration() {
    echo "Validating configuration..."
    local global_status=0
    local versions="9.0 9.1"
    for version in $versions; do
        pg_port=$(pg_lsclusters | grep "^$version" | awk '{print $3}')
        pg_status=$(pg_lsclusters | grep "^$version" | awk '{print $4}')
        if [ $pg_status == 'online' ]; then
            echo -e "\tpostgresql-$version:\t$pg_status (port: $pg_port)"
            if [ "$version -eq '9.0'" -a "$pg_port -ne '5432'" ]; then
                echo "ERROR: PostgreSQL $version running on bad port: $pg_port"
            elif [ "$version -eq '9.1'" -a "$pg_port -ne '5433'" ]; then
                echo "ERROR: PostgreSQL $version running on bad port: $pg_port"
            fi
        elif [ $pg_status == 'down' ]; then
            echo -e "\tpostgresql-$version:\t$pg_status"
            if [ $global_status -eq 0 ]; then
                global_status=1
            fi
        else
            echo -e "\tpostgresql-$version\tfailed"
            global_status=2
        fi
    done
    if [ $global_status -gt 0 ]; then
        echo "Stopping upgrade..."
        clean_configuration
        exit 1
    fi
}

stop_services() {
    echo "Stopping services..."
    xivo-service stop
    /etc/init.d/cron stop
    killall xivo-stat &>/dev/null
    killall xivo-call-logs &>/dev/null
}

migrate_db() {
    echo "Migrating database..."
    sudo -u postgres pg_dumpall -c -p 5432 | sudo -u postgres psql -p 5433 >$MIGRATION_LOG_FILE
    local status=$?
    if [ $status -gt 0 ]; then
        echo "ERROR: migration failed, see $MIGRATION_LOG_FILE for more infos."
        exit 1
    fi
    /etc/init.d/postgresql stop
}

clean_configuration() {
    echo "Cleaning configuration..."
    rm /etc/apt/sources.list.d/postgresql.list
    apt-get clean
    apt-get update >/dev/null
}

update_pg_config() {
    echo "Upgrading PostgreSQL configuration..."
    sed -i 's/^port = 5432/port = 5433/g' /etc/postgresql/9.0/main/postgresql.conf
    sed -i 's/^port = 5433/port = 5432/g' /etc/postgresql/9.1/main/postgresql.conf
    sed -i 's/^auto/disabled/g' /etc/postgresql/9.0/main/start.conf
}

start_services() {
    echo "Starting services..."
    /etc/init.d/postgresql restart
    xivo-service start
    /etc/init.d/cron start
}

dump_infos
continue_upgrade
prepare_configuration
validate_configuration
stop_services
migrate_db
clean_configuration
update_pg_config
start_services

cat <<-EOF

  *********** PostgreSQL successfully migrated from 9.0 to 9.1 ****************
  The old data is still on the system for safety reasons.
  You must validate the integrity of data using XiVO.
  For erase the old data, run the following command:
    $ apt-get purge postgresql-9.0 postgresql-client-9.0 postgresql-plpython-9.0
  *****************************************************************************

EOF

exit
