#!/bin/bash

PATH=/bin:/usr/bin:/sbin:/usr/sbin
action=$1
services_filter=$2
services="dahdi rabbitmq-server pf-xivo-sysconfd xivo-confgend xivo-dxtora xivo-provd xivo-agid asterisk xivo-agent xivo-ctid xivo-restapi"
monit_default="/etc/default/monit"
XIVO_DEFAULT_FILE="/etc/default/xivo"
MAX_RETRY_SERVICE=10
no_monit=0

if [ "$services_filter" = "all" ]; then
    services="postgresql nginx $services"
fi

if [ "$services_filter" != "no_monit" ]; then
    #services="$services monit"
    no_monit=1
fi

reversed_services=$(/bin/echo $services | tac -s' ')

usage() {
    cat << EOF
    usage : $0 action [services_filter]
    availables actions :
        status  : print status of all xivo services
        restart : restart all xivo services
        stop    : stop all xivo services
        start   : start all xivo services
        enable  : enable all xivo services
        disable : disable all xivo services

    availables services_filter :
        all      : add postgres and nginx to managed services
        no_monit : do not include monit

    impacted services : $services
EOF
    exit 0
}

xivo_status() {
    xivo-check-db
    echo "Checking services..."
    for service in $services; do
        /etc/init.d/$service status &> /dev/null
        if [ $? -eq 0 ]; then
            echo -e "\tOK\t$service"
        else
            echo -e "\tNOK\t$service"
        fi
    done
}


xivo_enable() {
    echo "Enabling XiVO services..."
    echo startup=yes > $XIVO_DEFAULT_FILE
}

xivo_disable() {
    echo "Disabling XiVO services..."
    echo startup=no > $XIVO_DEFAULT_FILE
}

disable_monit() {
    if [ $no_monit -eq 1 ]; then
        sed -i 's/startup=1/startup=0/' $monit_default
        /etc/init.d/monit stop > /dev/null
    fi
}

enable_monit() {
    if [ $no_monit -eq 1 ]; then
        sed -i 's/startup=0/startup=1/' $monit_default
        /etc/init.d/monit start > /dev/null
    fi
}

close_sip_port() {
    echo "Closing port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 1 ]; then
        /sbin/iptables -I INPUT 1 -p udp --dport 5060 -j DROP
    fi
}

open_sip_port() {
    echo "Opening port 5060."
    iptables -n --list | grep -q '^DROP.*5060'
    if [ $? -eq 0 ]; then
        /sbin/iptables -D INPUT -p udp --dport 5060 -j DROP
    fi
}

wait_for_service() {
    sleep 1 && echo -e ".\c"
    _x=$(( $_x + 1 ))
    if [[ $_x -eq $MAX_RETRY_SERVICE ]]; then
        echo " NOK"
        echo "ERR: Stop after $_x retry."
        exit 1
    fi
}

start_services() {
    local _services=$1
    for srv in $_services; do
        if [ -f /etc/init.d/$srv ]; then
            /usr/sbin/invoke-rc.d $srv start > /dev/null
            echo -e "\tstarting $srv ...\c"
            _x=0
            while ! /etc/init.d/$srv status &> /dev/null; do
                wait_for_service
            done
            echo " OK"
        fi
    done
}

stop_services() {
    local _services=$1
    for srv in $_services; do
        if [  -f /etc/init.d/$srv ]; then
            /usr/sbin/invoke-rc.d $srv stop > /dev/null
        fi
    done
}

xivo_start() {
    enable_monit
    /usr/sbin/invoke-rc.d asterisk stop > /dev/null
    echo "Waiting for services to start successfully..."
    start_services "$services"
    open_sip_port
    echo "XiVO fully booted !! Amazing !! :-)"
}

xivo_stop() {
    close_sip_port
    disable_monit
    echo "Waiting for services to stop successfully..."
    stop_services "$reversed_services"
}

xivo_restart() {
    xivo_stop
    xivo_start
}

case $action in
    status)  xivo_status;;
    restart) xivo_restart;;
    start)   xivo_start;;
    stop)    xivo_stop;;
    enable)  xivo_enable;;
    disable) xivo_disable;;
    *) usage;;
esac
