#!/bin/bash
monit_default="/etc/default/monit"
services="postgresql dahdi xivo-confgend pf-xivo-provd pf-xivo-agid asterisk xivo-ctid nginx"
lib_directory="/usr/share/xivo-upgrade"
upgrading_tool="apt-get"

stop_monit() {
    sed -i 's/startup=1/startup=0/' $monit_default
    invoke-rc.d monit stop > /dev/null
}

start_monit() {
    sed -i 's/startup=0/startup=1/' $monit_default
    invoke-rc.d monit start > /dev/null
}

restart_xivo() {
    echo "Restarting xivo"
    for service in $services; do
        invoke-rc.d $service stop > /dev/null
        invoke-rc.d $service start > /dev/null
    done
}

return_xivo_states() {
    echo "checking services"
    for service in $services; do
        /etc/init.d/$service status &> /dev/null
        if [ $? -eq 0 ]; then
            echo -e "\tOK\t$service"
        else
            echo -e "\tNOK\t$service"
        fi
    done
}

differed_action() {
    local state=$1
    local dir="$lib_directory/$state-upgrade.d"
    echo "executing $state upgrade action"
    for script in $(ls $dir/*); do
        bash $script
    done
}

get_version() {
    LANG="en_US.UTF-8"
    xivo_candidate=$(apt-cache policy pf-xivo | grep Candidate | grep -oE '1\.[2-9]\.[0-9]{1,2}')
    xivo_installed=$(apt-cache policy pf-xivo | grep Installed | grep -oE '1\.[2-9]\.[0-9]{1,2}')
    echo "installed version : $xivo_installed"
    echo "proposed update   : $xivo_candidate"
}

upgrading_system() {
    get_version
    if [ $force -eq 0 ]; then
        read -p 'Would you like to upgrade your system (all services will be restarted) [Y/n]? ' answer
        answer="${answer:-Y}"
        if [ "$answer" != 'y' -a "$answer" != 'Y' ]; then
            exit
        fi
    fi
    differed_action pre
    echo "upgrading xivo"
    $upgrading_tool dist-upgrade -y
    differed_action post
    restart_xivo
    return_xivo_states
}


if [ ! -f /etc/pf-xivo/web-interface/xivo.ini ]; then
    echo "Warning You should run the wizard before using xivo-upgrade"
    exit 1
fi

usage() {
    cat << EOF
    Usage: xivo-upgrade [-d] [-f]
        -d: only download packages
        -f: force yes
EOF
}

while getopts :df opt
do
  case ${opt} in
    d) download_only=1;;
    f) force=1;;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          usage
          exit -1
    ;;
  esac
done
download_only="${download_only:-"0"}"
force="${force:-"0"}"

if [ $download_only -eq 0 ]; then
    stop_monit
    upgrading_system
    start_monit
else
    $upgrading_tool -y -d dist-upgrade
fi
