#!/bin/bash
PATH=/bin:/usr/bin:/sbin:/usr/sbin
lib_directory="/usr/share/xivo-upgrade"
mirror_xivo="http://mirror.xivo.fr"

differed_action() {
	local state=$1
	local dir="$lib_directory/$state.d"
	echo "Executing $state upgrade action..."
	for script in $dir/*; do
		$script
	done
}

pre_stop() {
	differed_action pre-stop
}

post_stop() {
	differed_action post-stop
}

pre_start() {
	differed_action pre-start
}

post_start() {
	differed_action post-start
}

execute() {
	cmd=$*
	$cmd
	if [ $? -ne 0 ]; then
		start_xivo
		exit -1
	fi
}

stop_xivo() {
	xivo-service stop
	xivo-service disable
}

start_xivo() {
	xivo-service enable
	xivo-service start
}

upgrade() {
    export XIVO_VERSION_INSTALLED=$(xivo_version_installed)
    export XIVO_VERSION_CANDIDATE=$(xivo_version_candidate)
    pre_stop
    stop_xivo
    post_stop
    echo "Upgrading xivo..."
    if is_squeeze; then
        export UPGRADING_TO_WHEEZY=1
        exec_squeeze_to_wheezy_migration
    else
        execute apt-get install -o Dpkg::Options::="--force-confnew" xivo-config -y
        execute apt-get install xivo xivo-libdao xivo-ctid xivo-web-interface -y
        execute apt-get dist-upgrade -y
    fi
    pre_start
    start_xivo
    post_start
    xivo-check-conffiles
}

debian_version_installed() {
	local xivo_version=$(cut -c1 /etc/debian_version)
	echo $xivo_version
}

is_squeeze() {
	[ $(debian_version_installed) -eq 6 ]
}

display_xivo_version() {
	echo "installed version : $(xivo_version_installed)"
	echo "proposed update	: $(xivo_version_candidate)"
}

is_grub_broken() {
	for disk in $(awk '{print $2}' /boot/grub/device.map) ; do
		if [ ! -e "$disk" ] ; then
			return 0
		fi
	done
	return 1
}

check_if_grub_is_broken() {
	if is_grub_broken; then
		cat <<-EOF
		*********************************************
		* You must install GRUB 2 BEFORE rebooting: *
		*                                           *
		* # apt-get install grub2                   *
		* # rm /boot/grub/device.map                *
		* # grub-install /dev/<boot_device>         *
		* # reboot                                  *
		*                                           *
		*********************************************
		EOF
		exit
	fi
}

upgrading_system() {
	exec_database_migration
	upgrade_fai
	display_xivo_version
	display_ast11_notice
	display_wheezy_upgrade_notice
	if [ $force -eq 0 ]; then
		read -p 'Would you like to upgrade your system (all services will be restarted) [Y/n]? ' answer
		answer="${answer:-Y}"
		if [ "$answer" != 'y' -a "$answer" != 'Y' ]; then
		exit
		fi
	fi
	clean_fai
	upgrade
	display_post_wheezy_upgrade_notice
}

is_linux_3.2_installed() {
	[ -n "$(dpkg -l linux-image-3.2.0-* 2>/dev/null | grep '^ii')" ]
}

exec_squeeze_to_wheezy_migration() {
	wget -q -O - $mirror_xivo/d-i/wheezy/xivo-squeeze-to-wheezy.cfg | debconf-set-selections
	sed -i 's/squeeze/wheezy/' /etc/apt/sources.list
	export DEBIAN_FRONTEND=noninteractive

	xivo-service stop all

	apt-get update > /dev/null
	apt-get install --yes --force-yes python2.7 apt
	apt-get install --yes --force-yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" munin monit
	apt-get upgrade --yes --force-yes -o Dpkg::Options::="--force-confnew"
	apt-get install --yes --force-yes -o Dpkg::Options::="--force-confnew" python-flask/wheezy python-werkzeug/wheezy python-pika/wheezy
	apt-get install --yes --force-yes -o Dpkg::Options::="--force-confnew" xivo
	apt-get install --yes --force-yes -o Dpkg::Options::="--force-confnew" postgresql-common/wheezy
	apt-get dist-upgrade --yes --force-yes -o Dpkg::Options::="--force-confnew"
	apt-get update > /dev/null
	apt-get autoremove --yes

	if ! is_linux_3.2_installed ; then
		# Maybe a problem with the PAE kernel installation, trying the non-PAE kernel
		apt-get install --yes 'linux-image-3.2.0.*-486'
	fi

	kernel_release=$(ls /lib/modules/ |grep ^3.2)
	for kr in $kernel_release; do
		apt-get install dahdi-linux-modules-${kr} > /dev/null
	done

	xivo-service restart all
}

exec_database_migration() {
	local pg_version=$(pg_lsclusters | grep 'online' | awk '{print $1}')
	if [[ $pg_version == *"9.0"* ]]; then
		if ! /usr/bin/xivo-migrate-db; then
			exit
		fi
		export UPGRADING_POSTGRESQL=1
	fi
}

display_ast11_notice() {
	ast_version=$(dpkg-query -W -f '${Version}' asterisk 2>/dev/null)
	if dpkg --compare-versions "$ast_version" le 8:11-1; then
		cat <<-EOF

		Asterisk will be upgraded from version 1.8 to 11. You might be impacted if you:
		* have some custom dialplan
		* have some custom AGIs
		* have customized asterisk in some other way
		If you find yourself in one of these cases, you should make sure that
		your customizations still work with asterisk 11. Please refer to
		http://documentation.xivo.fr/production/upgrade/asterisk_11.html for
		more information.

	EOF

		if [ -f /usr/lib/asterisk/modules/codec_g729a.so ]; then
			mv /usr/lib/asterisk/modules/codec_g729a.so /tmp
			cat <<-EOF
			WARNING: G729 codec module detected.

			A G729 codec module has been detected on your system. Since it will not work with
			asterisk 11, it has been moved from /usr/lib/asterisk/modules to /tmp. To continue
			using the G729 module, you will have to install the asterisk 11 version of the module.

		EOF
		fi
	fi
}

display_wheezy_upgrade_notice() {
	if is_squeeze; then
		cat <<-EOF

		The Debian GNU/Linux system will be upgraded from version 6 (Squeeze)
		to 7 (Wheezy). Hence, this upgrade will be longer than other upgrades.

		You will need to RESTART the machine after the upgrade.

EOF
	fi
}

display_post_wheezy_upgrade_notice() {
	if [ "$UPGRADING_TO_WHEEZY" == "1" ] ; then
		check_if_grub_is_broken
		cat <<-EOF

		* You must RESTART the machine before using XiVO again.

		EOF
	fi
}

list_packages_with_filter () {
	filter="$1"
	aptitude -F '%p' search "$filter" | xargs
}

upgrade_fai() {
	echo "Upgrading FAI packages..."
	is_dev=$(list_packages_with_filter "(?installed)?name(\"pf-fai-xivo-1.2-skaro-dev|pf-fai-dev|xivo-fai-skaro-dev\")")
	is_rc=$(list_packages_with_filter "(?installed)?name(\"pf-fai-xivo-1.2-skaro-rc|pf-fai-rc|xivo-fai-skaro-rc\")")
	if [ -n "$is_dev" ]; then
		fai_package="xivo-fai-dev"
	elif [ -n "$is_rc" ]; then
		fai_package="xivo-fai-rc"
	else
		fai_package="xivo-fai"
	fi
	apt-get install --yes -o Dpkg::Options::="--force-confnew" $fai_package > /dev/null
	apt-get install --yes -o Dpkg::Options::="--force-confnew" $fai_package > /dev/null
	apt-get update > /dev/null
}

clean_fai() {
	echo "Cleaning FAI packages..."
	old_fai=$(list_packages_with_filter "(?config-files|?installed)?name(\"pf-fai|xivo-fai-skaro|xivo-fai-squeeze\")")
	if [ -n "$old_fai" ] ; then
		dpkg -P $old_fai > /dev/null
	fi
}

xivo_package() {
	list_packages_with_filter "?installed?name(\"^xivo$|^pf-xivo$\")"
}

xivo_version_installed() {
	echo "$(LANG='C' apt-cache policy $(xivo_package) | grep Installed | grep -oE '([0-9]{2}\.[0-9]+|1\.2\.[0-9]{1,2})' | head -n1)"
}

xivo_version_candidate() {
	echo "$(LANG='C' apt-cache policy xivo | grep Candidate | grep -oE '([0-9]{2}\.[0-9]+|1\.2\.[0-9]{1,2})' | head -n1)"
}

check_wizard_has_been_run() {
	local xivo_package=$(xivo_package)
	if [[ $(xivo_version_installed) < '13.03' && -f "/etc/$xivo_package/web-interface/xivo.ini" ]]; then
		touch "/var/lib/$xivo_package/configured"
		chmod 664 "/var/lib/$xivo_package/configured"
	fi

	if [ ! -f "/var/lib/$xivo_package/configured" ]; then
		echo "Warning You should run the wizard before using xivo-upgrade"
		exit 1
	fi
}

usage() {
	cat <<-EOF
	usage: xivo-upgrade [-d] [-f] [-h]
		-d: only download packages
		-f: force yes
		-h: print usage
	EOF
}

while getopts :dfh opt
do
  case ${opt} in
	d) download_only=1;;
	f) force=1;;
	h)
		usage
		exit 0
	;;
	'?')
		echo "${0} : option ${OPTARG} is not valid" >&2
		usage
		exit -1
	;;
  esac
done
download_only="${download_only:-"0"}"
force="${force:-"0"}"

check_wizard_has_been_run

if [ $download_only -eq 0 ]; then
	upgrading_system
else
	apt-get -y -d dist-upgrade
fi
