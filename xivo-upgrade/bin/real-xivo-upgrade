#!/bin/bash
PATH=/bin:/usr/bin:/sbin:/usr/sbin
version=$(cat /usr/share/pf-xivo/XIVO-VERSION)
lib_directory="/usr/share/xivo-upgrade"

differed_action() {
    local state=$1
    local dir="$lib_directory/$state.d"
    echo "Executing $state upgrade action..."
    for script in $(ls $dir/*); do
        $script
    done
}

pre_stop() {
    differed_action pre-stop
}

pre_start() {
    differed_action pre-start
}

post_start() {
    differed_action post-start
}

get_version() {
    LANG="C"
    xivo_candidate=$(apt-cache policy pf-xivo | grep Candidate | grep -oE '([0-9]{2}\.[0-9]+|1\.2\.[0-9]{1,2})' | head -n1)
    xivo_installed=$(apt-cache policy pf-xivo | grep Installed | grep -oE '([0-9]{2}\.[0-9]+|1\.2\.[0-9]{1,2})' | head -n1)
    echo "installed version : $xivo_installed"
    echo "proposed update   : $xivo_candidate"
}

execute() {
    cmd=$*
    $cmd
    if [ $? -ne 0 ]; then
        start_xivo
        exit -1
    fi
}

stop_xivo() {
    xivo-service stop
    xivo-service disable
}

start_xivo() {
    xivo-service enable
    xivo-service start
}

upgrade() {
    pre_stop
    stop_xivo
    echo "Upgrading xivo..."
    execute apt-get install -o Dpkg::Options::="--force-confnew" xivo-config -y
    execute apt-get install pf-xivo xivo-libdao xivo-ctid xivo-web-interface -y
    execute apt-get dist-upgrade -y
    pre_start
    xivo-check-db
    # stop asterisk before start xivo to refresh configuration
    /usr/sbin/invoke-rc.d asterisk stop > /dev/null
    start_xivo
    post_start
}

upgrading_system() {
    get_version
    if [ $force -eq 0 ]; then
        read -p 'Would you like to upgrade your system (all services will be restarted) [Y/n]? ' answer
        answer="${answer:-Y}"
        if [ "$answer" != 'y' -a "$answer" != 'Y' ]; then
            exit
        fi
    fi
    upgrade_fai
    upgrade
}

if [[ $version < '13.03' && -f "/etc/pf-xivo/web-interface/xivo.ini" ]]; then
    touch /var/lib/pf-xivo/configured
    chmod 664 /var/lib/pf-xivo/configured
fi

if [ ! -f /var/lib/pf-xivo/configured ]; then
    echo "Warning You should run the wizard before using xivo-upgrade"
    exit 1
fi

upgrade_fai() {
    echo "upgrade fai if needed"
    old_packages=$(aptitude search pf-fai | grep ^i | grep -oE 'pf-fai.* ' | awk '{print $1}')
    if [ "$old_packages" != "" ]; then
        new_packages=""
        for package in $old_packages; do
            case $package in
                "pf-fai") new_packages="$new_packages xivo-fai";;
                "pf-fai-dev") new_packages="$new_packages xivo-fai-dev";;
                "pf-fai-xivo-1.2-skaro") new_packages="$new_packages xivo-fai-skaro";;
                "pf-fai-xivo-1.2-skaro-rc") new_packages="$new_packages xivo-fai-skaro-rc";;
                "pf-fai-xivo-1.2-skaro-dev") new_packages="$new_packages xivo-fai-skaro-dev";;
            esac
        done
        apt-get install -y $new_packages > /dev/null
    fi
}

usage() {
    cat << EOF
    Usage: xivo-upgrade [-d] [-f]
        -d: only download packages
        -f: force yes
EOF
}

while getopts :df opt
do
  case ${opt} in
    d) download_only=1;;
    f) force=1;;
    '?')  echo "${0} : option ${OPTARG} is not valid" >&2
          usage
          exit -1
    ;;
  esac
done
download_only="${download_only:-"0"}"
force="${force:-"0"}"

if [ $download_only -eq 0 ]; then
    upgrading_system
else
    apt-get -y -d dist-upgrade
fi
